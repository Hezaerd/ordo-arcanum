import com.diffplug.spotless.LineEnding

plugins {
	id 'fabric-loom' version "${loom_version}" apply false
	id "com.diffplug.spotless" version "7.0.2"
	id 'java-library'
}

def debugArgs = [
	"-enableassertions",
	"-Dmixin.debug.verify=true",
	"-Dmixin.debug.countInjections=true",
	"-XX:+AllowEnhancedClassRedefinition"
]

def static getSubprojectVersion(Project project) {
	def version = project.properties["${project.name}-version"]

	if (!version) {
		throw new NullPointerException("Could not find version for " + project.name + " in gradle.properties")
	}

	return version
}

def moduleDependencies(Project project, List<String> depNames) {
	def deps = depNames.iterator().collect {
		project.dependencies.project(path: ":$it", configuration: 'namedElements')
	}

	project.dependencies {
		deps.each {
			api it
		}
	}
}

spotless {
	groovyGradle {
		target 'src/**/*.gradle', '*.gradle', 'gradle/*.gradle'
		greclipse()
	}
}
allprojects {
	group = "com.hezaerd"

	apply plugin: 'java-library'
	apply plugin: "checkstyle"
	apply plugin: 'fabric-loom'
	apply plugin: "com.diffplug.spotless"

	tasks.withType(JavaCompile).configureEach {
		it.options.release = 17
	}

	java {
		sourceCompatibility = JavaVersion.VERSION_17
		targetCompatibility = JavaVersion.VERSION_17
		withSourcesJar()
	}

	loom {
		mixin {
			useLegacyMixinAp = false
		}

		runs {
			client {
				client()
				vmArgs(debugArgs)
			}
			server {
				server()
				vmArgs(debugArgs)
			}
		}
	}

	spotless {
		lineEndings = LineEnding.UNIX

		java {
			removeUnusedImports()
			importOrder('java', 'javax', '', 'net.minecraft', 'com.mojang', 'net.minecraft')
			leadingSpacesToTabs()
			trimTrailingWhitespace()
		}

		json {
			target 'src/**/lang/*.json'
			gson()
					.indentWithSpaces(2)
					.sortByKeys()
		}
	}

	subprojects.each { p ->
		loom.mods.register(p.name) {
			sourceSet p.sourceSets.main
		}
	}

	repositories {
		maven {
			name = "TerraformersMC"
			url = "https://maven.terraformersmc.com/"
		}
		maven {
			name = "FzzyMaven"
			url = "https://maven.fzzyhmstrs.me/"
		}
	}

	dependencies {
		minecraft "com.mojang:minecraft:${minecraft_version}"
		mappings "net.fabricmc:yarn:${yarn_mappings}"
		modImplementation "net.fabricmc:fabric-loader:${loader_version}"
		modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

		modImplementation "com.terraformersmc:modmenu:${modmenu_version}"
		modImplementation "me.fzzyhmstrs:fzzy_config:${fzzyConfigVersion}"

		api "com.h2database:h2:${h2_version}"
	}

	tasks.withType(ProcessResources).configureEach {
		inputs.property "version", project.version

		filesMatching("fabric.mod.json") {
			expand "version": inputs.properties.version
		}
	}

	jar {
		from(rootProject.file('LICENSE')) {
			rename { "${it}_${project.name}" }
		}
	}

	loom.runs.configureEach {
		vmArgs(debugArgs)
	}
}

dependencies {
	afterEvaluate {
		subprojects.each {
			api project(path: "${it.path}", configuration: "namedElements")
		}
	}
}

remapJar {
	afterEvaluate {
		subprojects.each {
			nestedJars.from project("${it.path}").tasks.remapJar
		}
	}
}
