plugins {
    id 'fabric-loom' version "${loom_version}" apply false
    id 'java-library'
}

def debugArgs = [
    "-enableassertions",
    "-Dmixin.debug.verify=true",
    "-Dmixin.debug.countInjections=true",
]

def static getSubprojectVersion(Project project) {
    def version = project.properties["${project.name}-version"]

    if (!version) {
        throw new NullPointerException("Could not find version for " + project.name + " in gradle.properties")
    }

    return version
}

def moduleDependencies(Project project, List<String> depNames) {
    def deps = depNames.iterator().collect {
        project.dependencies.project(path: ":$it", configuration: 'namedElements')
    }

    project.dependencies {
        deps.each {
            api it
        }
    }
}

allprojects {
    group = "com.hezaerd"
    
    apply plugin: 'java-library'
    apply plugin: 'fabric-loom'

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 17
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
        withSourcesJar()
    }

    loom {
        mixin {
            useLegacyMixinAp = false
        }

        runs {
            client {
                client()
                vmArgs(debugArgs)
            }
            server {
                server()
                vmArgs(debugArgs)
            }
        }
    }

    loom {
        mixin {
            useLegacyMixinAp = false
        }

        runs {
            client {
                client()
                vmArgs(debugArgs)
            }
            server {
                server()
                vmArgs(debugArgs)
            }
        }
    }

    subprojects.each { p ->
        loom.mods.register(p.name) {
            sourceSet p.sourceSets.main
        }
    }
    
    repositories {
        maven {
            name = "TerraformersMC"
            url = "https://maven.terraformersmc.com/"
        }
        maven {
            name = "Shedaniel"
            url = "https://maven.shedaniel.me/"
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${minecraft_version}"
        mappings "net.fabricmc:yarn:${yarn_mappings}"
        modImplementation "net.fabricmc:fabric-loader:${loader_version}"
        modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

        modImplementation "com.terraformersmc:modmenu:${modmenu_version}"

        modApi("me.shedaniel.cloth:cloth-config-fabric:$cloth_config_version") {
            exclude(group: "net.fabricmc.fabric-api")
        }
    }

    tasks.withType(ProcessResources).configureEach {
        inputs.property "version", project.version

        filesMatching("fabric.mod.json") {
            expand "version": inputs.properties.version
        }
    }

    jar {
        from(rootProject.file('LICENSE')) {
            rename { "${it}_${project.name}" }
        }
    }

    loom.runs.configureEach {
        vmArgs(debugArgs)
    }
}

dependencies {
    afterEvaluate {
        subprojects.each {
            api project(path: "${it.path}", configuration: "namedElements")
        }
    }
}

remapJar {
    afterEvaluate {
        subprojects.each {
            nestedJars.from project("${it.path}").tasks.remapJar
        }
    }
}